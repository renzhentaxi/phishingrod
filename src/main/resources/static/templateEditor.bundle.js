!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!w[e]||!b[e])return;for(var n in b[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(f[n]=t[n]);0==--v&&0===y&&N()}(e,n),t&&t(e,n)};var n,r=!0,o="3510ab600353bae4193d",a=1e4,i={},s=[],c=[];function l(e){var t=k[e];if(!t)return D;var r=function(r){return t.hot.active?(k[r]?-1===k[r].parents.indexOf(e)&&k[r].parents.push(e):(s=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),s=[]),D(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return D[e]},set:function(t){D[e]=t}}};for(var a in D)Object.prototype.hasOwnProperty.call(D,a)&&"e"!==a&&Object.defineProperty(r,a,o(a));return r.e=function(e){return"ready"===u&&p("prepare"),y++,D.e(e).then(t,function(e){throw t(),e});function t(){y--,"prepare"===u&&(g[e]||E(e),0===y&&0===v&&N())}},r}var d=[],u="idle";function p(e){u=e;for(var t=0;t<d.length;t++)d[t].call(null,e)}var h,f,m,v=0,y=0,g={},b={},w={};function x(e){return+e+""===e?+e:e}function O(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return r=e,p("check"),(t=a,t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,a=D.p+""+o+".hot-update.json";r.open("GET",a,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+a+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+a+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}})).then(function(e){if(!e)return p("idle"),null;b={},g={},w=e.c,m=e.h,p("prepare");var t=new Promise(function(e,t){h={resolve:e,reject:t}});f={};return E(1),"prepare"===u&&0===y&&0===v&&N(),t});var t}function E(e){w[e]?(b[e]=!0,v++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=D.p+""+e+"."+o+".hot-update.js",t.appendChild(n)}(e)):g[e]=!0}function N(){p("ready");var e=h;if(h=null,e)if(r)Promise.resolve().then(function(){return C(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in f)Object.prototype.hasOwnProperty.call(f,n)&&t.push(x(n));e.resolve(t)}}function C(t){if("ready"!==u)throw new Error("apply() is only allowed in ready status");var n,r,a,c,l;function d(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var o=r.pop(),a=o.id,i=o.chain;if((c=k[a])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:a};if(c.hot._main)return{type:"unaccepted",chain:i,moduleId:a};for(var s=0;s<c.parents.length;s++){var l=c.parents[s],d=k[l];if(d){if(d.hot._declinedDependencies[a])return{type:"declined",chain:i.concat([l]),moduleId:a,parentId:l};-1===t.indexOf(l)&&(d.hot._acceptedDependencies[a]?(n[l]||(n[l]=[]),h(n[l],[a])):(delete n[l],t.push(l),r.push({chain:i.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var v={},y=[],g={},b=function(){console.warn("[HMR] unexpected require("+E.moduleId+") to disposed module")};for(var O in f)if(Object.prototype.hasOwnProperty.call(f,O)){var E;l=x(O);var N=!1,C=!1,_=!1,M="";switch((E=f[O]?d(l):{type:"disposed",moduleId:O}).chain&&(M="\nUpdate propagation: "+E.chain.join(" -> ")),E.type){case"self-declined":t.onDeclined&&t.onDeclined(E),t.ignoreDeclined||(N=new Error("Aborted because of self decline: "+E.moduleId+M));break;case"declined":t.onDeclined&&t.onDeclined(E),t.ignoreDeclined||(N=new Error("Aborted because of declined dependency: "+E.moduleId+" in "+E.parentId+M));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(E),t.ignoreUnaccepted||(N=new Error("Aborted because "+l+" is not accepted"+M));break;case"accepted":t.onAccepted&&t.onAccepted(E),C=!0;break;case"disposed":t.onDisposed&&t.onDisposed(E),_=!0;break;default:throw new Error("Unexception type "+E.type)}if(N)return p("abort"),Promise.reject(N);if(C)for(l in g[l]=f[l],h(y,E.outdatedModules),E.outdatedDependencies)Object.prototype.hasOwnProperty.call(E.outdatedDependencies,l)&&(v[l]||(v[l]=[]),h(v[l],E.outdatedDependencies[l]));_&&(h(y,[E.moduleId]),g[l]=b)}var P,j=[];for(r=0;r<y.length;r++)l=y[r],k[l]&&k[l].hot._selfAccepted&&j.push({module:l,errorHandler:k[l].hot._selfAccepted});p("dispose"),Object.keys(w).forEach(function(e){!1===w[e]&&function(e){delete installedChunks[e]}(e)});for(var A,T,H=y.slice();H.length>0;)if(l=H.pop(),c=k[l]){var I={},L=c.hot._disposeHandlers;for(a=0;a<L.length;a++)(n=L[a])(I);for(i[l]=I,c.hot.active=!1,delete k[l],delete v[l],a=0;a<c.children.length;a++){var S=k[c.children[a]];S&&((P=S.parents.indexOf(l))>=0&&S.parents.splice(P,1))}}for(l in v)if(Object.prototype.hasOwnProperty.call(v,l)&&(c=k[l]))for(T=v[l],a=0;a<T.length;a++)A=T[a],(P=c.children.indexOf(A))>=0&&c.children.splice(P,1);for(l in p("apply"),o=m,g)Object.prototype.hasOwnProperty.call(g,l)&&(e[l]=g[l]);var B=null;for(l in v)if(Object.prototype.hasOwnProperty.call(v,l)&&(c=k[l])){T=v[l];var q=[];for(r=0;r<T.length;r++)if(A=T[r],n=c.hot._acceptedDependencies[A]){if(-1!==q.indexOf(n))continue;q.push(n)}for(r=0;r<q.length;r++){n=q[r];try{n(T)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:l,dependencyId:T[r],error:e}),t.ignoreErrored||B||(B=e)}}}for(r=0;r<j.length;r++){var U=j[r];l=U.module,s=[l];try{D(l)}catch(e){if("function"==typeof U.errorHandler)try{U.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:l,error:n,originalError:e}),t.ignoreErrored||B||(B=n),B||(B=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:l,error:e}),t.ignoreErrored||B||(B=e)}}return B?(p("fail"),Promise.reject(B)):(p("idle"),new Promise(function(e){e(y)}))}var k={};function D(t){if(k[t])return k[t].exports;var r=k[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:O,apply:C,status:function(e){if(!e)return u;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var t=d.indexOf(e);t>=0&&d.splice(t,1)},data:i[e]};return n=void 0,t}(t),parents:(c=s,s=[],c),children:[]};return e[t].call(r.exports,r,r.exports,l(t)),r.l=!0,r.exports}D.m=e,D.c=k,D.d=function(e,t,n){D.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},D.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},D.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return D.d(t,"a",t),t},D.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},D.p="",D.h=function(){return o},l(7)(D.s=7)}([function(e,t,n){"use strict";n.d(t,"a",function(){return r});class r{static from(e){let t=e.className,n=e.tagName;const o=r.element(t,n);for(let t in e)"className"!==t&&"tagName"!==t&&o.setAttribute(t,e[t]);return o}static wrapChild(e,t){const n=t.parentElement,o=r.from(e);return o.classList.add("wrapper"),n.replaceChild(o,t),o.appendChild(t),o}static wrap(e,...t){const n=r.from(e);for(let e of t)n.appendChild(e);return n}static wrapWithTag(e="div",...t){const n=document.createElement(e);for(let e of t)n.appendChild(e);return n}static element(e,t="div"){const n=document.createElement(t);return e&&e.className&&(e=e.className),null!==e&&(n.className=e),n}static text(e,t,n){const o=document.createTextNode(e);if(t){const e=r.element(t,n);return e.appendChild(o),e}return o}static button(e,t){const n=this.element(t,"button");return n.appendChild(document.createTextNode(e)),n}static input(e,t){const n=this.element(t,"input");return n.placeholder=e,n}static unwrap(e){console.log(e),console.assert(e.classList.contains("wrapper"));const t=e.firstChild,n=e.parentElement;n.replaceChild(t,e),n.normalize()}static extractText(e,t,n){const r=e.splitText(t);r.splitText(n-t);return r}}},function(e,t,n){"use strict";n.d(t,"a",function(){return r});const r={parameter:{className:"pr-param",type:{attribute:"pr-param-type",text:"text",link:"link"},name:{attribute:"pr-param-name"},node:{className:"pr-param-node"},control:{className:"pr-param-control",deleteButton:"pr-param-control-delete"}},menu:{className:"context-menu",option:{className:"context-menu-option",title:"context-menu-option-title",input:"context-menu-option-input"}}}},function(e,t,n){"use strict";n.d(t,"b",function(){return o}),n.d(t,"a",function(){return a});var r=n(0);function o(e,t,n){return e.length>t?e.substr(0,t-n.length)+n:e}function a(e,t){const n={tagName:"link",rel:"stylesheet",href:t};e.appendChild(r.a.from(n))}},function(e,t,n){"use strict";var r=n(0),o=n(1);class a{constructor(e){this.name=e,this.parameterType=o.a.parameter.type.text,this.parameterNodes=[],this.wrapper={className:o.a.parameter.node,tagName:"div",[o.a.parameter.name.attribute]:this.name},console.log("Creating new parameter: "+e)}get paramType(){return this.parameterType}addNode(e){e.nodeType===Node.TEXT_NODE?(e=r.a.wrapChild(this.wrapper,e),this.parameterNodes.push(e)):console.error("Error")}removeParamNode(e){const t=this.parameterNodes.findIndex(e);console.assert(-1!==t),this.parameterNodes.splice(t,1),r.a.unwrap(e)}clear(){for(;this.parameterNodes.length>0;){const e=this.parameterNodes.pop();r.a.unwrap(e)}}}class i{constructor(e,t){this.model=e,this.onDeleteCallBack=t,this.wrapperConfig={className:o.a.parameter.control,[o.a.parameter.name.attribute]:e.name,[o.a.parameter.type.attribute]:e.paramType,tagName:"li"},this.element=r.a.from(this.wrapperConfig),this.label=r.a.text(e.name,"pr-param-control-nameLabel"),this.deleteButton=r.a.button("X",o.a.parameter.control.deleteButton),this.deleteButton.onclick=(()=>this.onDelete()),this.element=r.a.wrap(this.wrapperConfig,this.label,this.deleteButton),console.log(this.element),this.element.onmouseenter=(()=>this.highlight()),this.element.onmouseleave=(()=>this.unhighlight())}onDelete(){this.onDeleteCallBack(),this.model.clear(),this.element.remove()}unhighlight(){for(let e of this.model.parameterNodes)e.removeAttribute("active")}highlight(){for(let e of this.model.parameterNodes)e.setAttribute("active","")}}n.d(t,"a",function(){return s});class s{constructor(){this.parameterControls=[],this.parameterViews=[],this.view=document.querySelector(".Parameter-list"),console.assert(this.view)}indexOf(e){for(let t=0;t<this.parameterControls.length;t++){if(this.parameterControls[t].name===e)return t}return-1}has(e){return-1!==this.indexOf(e)}findParameter(e){const t=this.indexOf(e);return-1===t?null:{control:this.parameterControls[t],view:this.parameterViews[t]}}addParameter(e,t){console.assert(!this.has(e));const n=new a(e,t),r=new i(n,e=>this.deleteParameter(e));return this.parameterControls.push(n),this.parameterViews.push(r),this.view.appendChild(r.element),{control:n,view:r}}deleteParameter(e){const t=this.indexOf(e);this.parameterControls.splice(t,1),this.parameterViews.splice(t,1)}}},function(e,t,n){"use strict";var r=n(0),o=n(1);const a=10;class i{constructor(e){this.template=e,this.menuElement=r.a.element(o.a.menu,"ul"),e.body.appendChild(this.menuElement),e.addEventListener("click",e=>this.handleClick(e))}clear(){const e=this.menuElement;for(;e.lastChild;)e.removeChild(e.lastChild)}addOption(e){this.menuElement.appendChild(e.element)}position(e,t){const n=this.menuElement,r=this.template.documentElement.clientWidth,o=this.template.documentElement.clientHeight,i=n.offsetWidth,s=n.offsetHeight,c=r-i-a,l=o-s-a;console.log(r),console.log(e),n.style.left=(e>c?c:e)+"px",n.style.top=(t>l?l:t)+"px"}replaceMenuOptions(...e){this.clear();for(let t of e)this.addOption(t)}showMenu(){this.menuElement.setAttribute("Active","")}hideMenu(){this.clear(),this.menuElement.removeAttribute("Active")}handleClick(e){const t=e.target;this.menuElement.contains(t)||this.hideMenu()}}var s=n(2);class c{constructor(e,t){this.menu=e,this.parameterContainer=t,this.title=r.a.text("Parametrize text",o.a.menu.option.title),this.input=r.a.input("Enter Parameter Name",o.a.menu.option.input),this.btn=r.a.button("Accept",o.a.menu.option.acceptBtn),this.btn.onclick=(()=>this.submit()),this.el=r.a.wrapWithTag("li",this.title,this.input,this.btn)}submit(){const e=this.parameterContainer,t=this.input.value,{textNode:n,start:a,end:i}=this.data,{control:s,view:c}=e.findParameter(t)||e.addParameter(t,o.a.parameter.type.text),l=r.a.extractText(n,a,i);s.addNode(l),this.menu.hideMenu()}get element(){return this.el}setData(e,t,n){if(this.title.innerText="Convert this text: {"+Object(s.b)(function(e,t,n){return e.textContent.substring(t,n)}(e,t,n),15,"...")+"}\nAs:",t>n){const e=t;t=n,n=e}this.data={textNode:e,start:t,end:n}}}n.d(t,"a",function(){return l});class l{constructor(e,t){this.template=e,this.menu=new i(e),this.handleContextMenu=this.handleContextMenu.bind(this),this.handleClick=this.handleClick.bind(this),e.body.addEventListener("contextmenu",this.handleContextMenu),e.body.addEventListener("click",this.handleClick),this.textOption=new c(this.menu,t)}static activateLinkMenu(e){console.log(e),console.log("good selection link")}activateTextMenu(e,t,n){if(t>n){const e=t;t=n,n=e}this.textOption.setData(e,t,n),this.menu.replaceMenuOptions(this.textOption)}static processSelection(e,t){if("Range"===t.type){if(t.anchorNode===t.focusNode){return 0===t.anchorNode.textContent.substring(t.anchorOffset,t.focusOffset).trim().length?"empty":"text"}return"mixed"}return"A"===e.tagName?"link":"none"}handleContextMenu(e){const t=e.target,n=this.template.getSelection();switch(l.processSelection(t,n)){case"empty":console.log("Invalid selection! You have selected empty/whitespaces");break;case"text":this.activateTextMenu(n.anchorNode,n.anchorOffset,n.focusOffset);break;case"mixed":console.log("Invalid selection! You have selected multiple nodes at once");break;case"link":l.activateLinkMenu(t);break;case"none":console.log("Empty Selection")}this.menu.showMenu(),this.menu.position(e.clientX,e.clientY)}handleClick(e){const t=e.target;"A"===t.tagName&&(l.activateLinkMenu(t),this.menu.showMenu())}}},function(e,t,n){"use strict";function r(e){const t=document.createTreeWalker(e,NodeFilter.SHOW_ELEMENT);for(;t.nextNode();)"A"===t.currentNode.tagName&&(console.log(t.currentNode),t.currentNode.addEventListener("click",e=>e.preventDefault()));e.addEventListener("contextmenu",e=>e.preventDefault())}n.d(t,"a",function(){return r})},,function(e,t,n){"use strict";n.r(t);var r=n(5),o=n(4),a=n(3),i=n(2);const s=document.querySelector(".pr-source"),c=document.createElement("iframe");c.src=s.getAttribute("data-templateUrl"),c.id="templateContainer",c.onload=(()=>{const e=c.contentDocument;Object(r.a)(e.body),Object(i.a)(e.head,"/contextmenu.css"),Object(i.a)(e.head,"parameter.css");const t=new a.a;new o.a(e,t)}),s.appendChild(c)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,